// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "qrmakerpro.h"

// Dispatch interfaces referenced by this interface
#include "Picture.h"
#include "Font.h"

/////////////////////////////////////////////////////////////////////////////
// CQRmakerPro

IMPLEMENT_DYNCREATE(CQRmakerPro, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CQRmakerPro properties

OLE_COLOR CQRmakerPro::GetBackColor()
{
	OLE_COLOR result;
	GetProperty(DISPID_BACKCOLOR, VT_I4, (void*)&result);
	return result;
}

void CQRmakerPro::SetBackColor(OLE_COLOR propVal)
{
	SetProperty(DISPID_BACKCOLOR, VT_I4, propVal);
}

VARIANT CQRmakerPro::GetInputData()
{
	VARIANT result;
	GetProperty(0x3, VT_VARIANT, (void*)&result);
	return result;
}

void CQRmakerPro::SetInputData(const VARIANT& propVal)
{
	SetProperty(0x3, VT_VARIANT, &propVal);
}

OLE_HANDLE CQRmakerPro::GetHWnd()
{
	OLE_HANDLE result;
	GetProperty(DISPID_HWND, VT_I4, (void*)&result);
	return result;
}

void CQRmakerPro::SetHWnd(OLE_HANDLE propVal)
{
	SetProperty(DISPID_HWND, VT_I4, propVal);
}

long CQRmakerPro::GetAutoRedraw()
{
	long result;
	GetProperty(0x1, VT_I4, (void*)&result);
	return result;
}

void CQRmakerPro::SetAutoRedraw(long propVal)
{
	SetProperty(0x1, VT_I4, propVal);
}

short CQRmakerPro::GetBend()
{
	short result;
	GetProperty(0x4, VT_I2, (void*)&result);
	return result;
}

void CQRmakerPro::SetBend(short propVal)
{
	SetProperty(0x4, VT_I2, propVal);
}

short CQRmakerPro::GetBstart()
{
	short result;
	GetProperty(0x5, VT_I2, (void*)&result);
	return result;
}

void CQRmakerPro::SetBstart(short propVal)
{
	SetProperty(0x5, VT_I2, propVal);
}

long CQRmakerPro::GetModelNo()
{
	long result;
	GetProperty(0x6, VT_I4, (void*)&result);
	return result;
}

void CQRmakerPro::SetModelNo(long propVal)
{
	SetProperty(0x6, VT_I4, propVal);
}

short CQRmakerPro::GetNumCell()
{
	short result;
	GetProperty(0x7, VT_I2, (void*)&result);
	return result;
}

void CQRmakerPro::SetNumCell(short propVal)
{
	SetProperty(0x7, VT_I2, propVal);
}

CPicture CQRmakerPro::GetPicture()
{
	LPDISPATCH pDispatch;
	GetProperty(0x8, VT_DISPATCH, (void*)&pDispatch);
	return CPicture(pDispatch);
}

void CQRmakerPro::SetPicture(LPDISPATCH propVal)
{
	SetProperty(0x8, VT_DISPATCH, propVal);
}

short CQRmakerPro::GetCellAdjust()
{
	short result;
	GetProperty(0x9, VT_I2, (void*)&result);
	return result;
}

void CQRmakerPro::SetCellAdjust(short propVal)
{
	SetProperty(0x9, VT_I2, propVal);
}

short CQRmakerPro::GetCellPitch()
{
	short result;
	GetProperty(0xa, VT_I2, (void*)&result);
	return result;
}

void CQRmakerPro::SetCellPitch(short propVal)
{
	SetProperty(0xa, VT_I2, propVal);
}

short CQRmakerPro::GetCellUnit()
{
	short result;
	GetProperty(0xb, VT_I2, (void*)&result);
	return result;
}

void CQRmakerPro::SetCellUnit(short propVal)
{
	SetProperty(0xb, VT_I2, propVal);
}

short CQRmakerPro::GetTextOrBinary()
{
	short result;
	GetProperty(0xc, VT_I2, (void*)&result);
	return result;
}

void CQRmakerPro::SetTextOrBinary(short propVal)
{
	SetProperty(0xc, VT_I2, propVal);
}

VARIANT CQRmakerPro::GetInputDataB()
{
	VARIANT result;
	GetProperty(0xd, VT_VARIANT, (void*)&result);
	return result;
}

void CQRmakerPro::SetInputDataB(const VARIANT& propVal)
{
	SetProperty(0xd, VT_VARIANT, &propVal);
}

long CQRmakerPro::GetThrowError()
{
	long result;
	GetProperty(0x2, VT_I4, (void*)&result);
	return result;
}

void CQRmakerPro::SetThrowError(long propVal)
{
	SetProperty(0x2, VT_I4, propVal);
}

short CQRmakerPro::GetMakeStatus()
{
	short result;
	GetProperty(0xe, VT_I2, (void*)&result);
	return result;
}

void CQRmakerPro::SetMakeStatus(short propVal)
{
	SetProperty(0xe, VT_I2, propVal);
}

short CQRmakerPro::GetDivide1()
{
	short result;
	GetProperty(0xf, VT_I2, (void*)&result);
	return result;
}

void CQRmakerPro::SetDivide1(short propVal)
{
	SetProperty(0xf, VT_I2, propVal);
}

short CQRmakerPro::GetDivide2()
{
	short result;
	GetProperty(0x10, VT_I2, (void*)&result);
	return result;
}

void CQRmakerPro::SetDivide2(short propVal)
{
	SetProperty(0x10, VT_I2, propVal);
}

long CQRmakerPro::GetEccLevel()
{
	long result;
	GetProperty(0x11, VT_I4, (void*)&result);
	return result;
}

void CQRmakerPro::SetEccLevel(long propVal)
{
	SetProperty(0x11, VT_I4, propVal);
}

short CQRmakerPro::GetQuietZone()
{
	short result;
	GetProperty(0x12, VT_I2, (void*)&result);
	return result;
}

void CQRmakerPro::SetQuietZone(short propVal)
{
	SetProperty(0x12, VT_I2, propVal);
}

long CQRmakerPro::GetRotate()
{
	long result;
	GetProperty(0x13, VT_I4, (void*)&result);
	return result;
}

void CQRmakerPro::SetRotate(long propVal)
{
	SetProperty(0x13, VT_I4, propVal);
}

unsigned long CQRmakerPro::GetForeBColor()
{
	unsigned long result;
	GetProperty(0x14, VT_I4, (void*)&result);
	return result;
}

void CQRmakerPro::SetForeBColor(unsigned long propVal)
{
	SetProperty(0x14, VT_I4, propVal);
}

unsigned long CQRmakerPro::GetForeWColor()
{
	unsigned long result;
	GetProperty(0x15, VT_I4, (void*)&result);
	return result;
}

void CQRmakerPro::SetForeWColor(unsigned long propVal)
{
	SetProperty(0x15, VT_I4, propVal);
}

long CQRmakerPro::GetGapAdjust()
{
	long result;
	GetProperty(0x16, VT_I4, (void*)&result);
	return result;
}

void CQRmakerPro::SetGapAdjust(long propVal)
{
	SetProperty(0x16, VT_I4, propVal);
}

short CQRmakerPro::GetBarHeight()
{
	short result;
	GetProperty(0x17, VT_I2, (void*)&result);
	return result;
}

void CQRmakerPro::SetBarHeight(short propVal)
{
	SetProperty(0x17, VT_I2, propVal);
}

long CQRmakerPro::GetChrDisplay()
{
	long result;
	GetProperty(0x18, VT_I4, (void*)&result);
	return result;
}

void CQRmakerPro::SetChrDisplay(long propVal)
{
	SetProperty(0x18, VT_I4, propVal);
}

long CQRmakerPro::GetChkDigit()
{
	long result;
	GetProperty(0x19, VT_I4, (void*)&result);
	return result;
}

void CQRmakerPro::SetChkDigit(long propVal)
{
	SetProperty(0x19, VT_I4, propVal);
}

long CQRmakerPro::GetCodeType()
{
	long result;
	GetProperty(0x1a, VT_I4, (void*)&result);
	return result;
}

void CQRmakerPro::SetCodeType(long propVal)
{
	SetProperty(0x1a, VT_I4, propVal);
}

float CQRmakerPro::GetNwRatio()
{
	float result;
	GetProperty(0x1b, VT_R4, (void*)&result);
	return result;
}

void CQRmakerPro::SetNwRatio(float propVal)
{
	SetProperty(0x1b, VT_R4, propVal);
}

long CQRmakerPro::GetOptEANUPC()
{
	long result;
	GetProperty(0x1c, VT_I4, (void*)&result);
	return result;
}

void CQRmakerPro::SetOptEANUPC(long propVal)
{
	SetProperty(0x1c, VT_I4, propVal);
}

long CQRmakerPro::GetOptITF()
{
	long result;
	GetProperty(0x1d, VT_I4, (void*)&result);
	return result;
}

void CQRmakerPro::SetOptITF(long propVal)
{
	SetProperty(0x1d, VT_I4, propVal);
}

long CQRmakerPro::GetOptSTF()
{
	long result;
	GetProperty(0x1e, VT_I4, (void*)&result);
	return result;
}

void CQRmakerPro::SetOptSTF(long propVal)
{
	SetProperty(0x1e, VT_I4, propVal);
}

long CQRmakerPro::GetOptCODE128()
{
	long result;
	GetProperty(0x1f, VT_I4, (void*)&result);
	return result;
}

void CQRmakerPro::SetOptCODE128(long propVal)
{
	SetProperty(0x1f, VT_I4, propVal);
}

long CQRmakerPro::GetOptPLESSEY()
{
	long result;
	GetProperty(0x20, VT_I4, (void*)&result);
	return result;
}

void CQRmakerPro::SetOptPLESSEY(long propVal)
{
	SetProperty(0x20, VT_I4, propVal);
}

float CQRmakerPro::GetImageHeight()
{
	float result;
	GetProperty(0x21, VT_R4, (void*)&result);
	return result;
}

void CQRmakerPro::SetImageHeight(float propVal)
{
	SetProperty(0x21, VT_R4, propVal);
}

float CQRmakerPro::GetImageWidth()
{
	float result;
	GetProperty(0x22, VT_R4, (void*)&result);
	return result;
}

void CQRmakerPro::SetImageWidth(float propVal)
{
	SetProperty(0x22, VT_R4, propVal);
}

COleFont CQRmakerPro::GetFont()
{
	LPDISPATCH pDispatch;
	GetProperty(DISPID_FONT, VT_DISPATCH, (void*)&pDispatch);
	return COleFont(pDispatch);
}

void CQRmakerPro::SetFont(LPDISPATCH propVal)
{
	SetProperty(DISPID_FONT, VT_DISPATCH, propVal);
}

short CQRmakerPro::GetQRversion()
{
	short result;
	GetProperty(0x23, VT_I2, (void*)&result);
	return result;
}

void CQRmakerPro::SetQRversion(short propVal)
{
	SetProperty(0x23, VT_I2, propVal);
}

long CQRmakerPro::GetMaxiCodeMode()
{
	long result;
	GetProperty(0x24, VT_I4, (void*)&result);
	return result;
}

void CQRmakerPro::SetMaxiCodeMode(long propVal)
{
	SetProperty(0x24, VT_I4, propVal);
}

long CQRmakerPro::GetPDF417Model()
{
	long result;
	GetProperty(0x25, VT_I4, (void*)&result);
	return result;
}

void CQRmakerPro::SetPDF417Model(long propVal)
{
	SetProperty(0x25, VT_I4, propVal);
}

long CQRmakerPro::GetPDF417Ecc()
{
	long result;
	GetProperty(0x26, VT_I4, (void*)&result);
	return result;
}

void CQRmakerPro::SetPDF417Ecc(long propVal)
{
	SetProperty(0x26, VT_I4, propVal);
}

long CQRmakerPro::GetDmxModel()
{
	long result;
	GetProperty(0x27, VT_I4, (void*)&result);
	return result;
}

void CQRmakerPro::SetDmxModel(long propVal)
{
	SetProperty(0x27, VT_I4, propVal);
}

short CQRmakerPro::GetPDF417Colum()
{
	short result;
	GetProperty(0x28, VT_I2, (void*)&result);
	return result;
}

void CQRmakerPro::SetPDF417Colum(short propVal)
{
	SetProperty(0x28, VT_I2, propVal);
}

short CQRmakerPro::GetPDF417Row()
{
	short result;
	GetProperty(0x29, VT_I2, (void*)&result);
	return result;
}

void CQRmakerPro::SetPDF417Row(short propVal)
{
	SetProperty(0x29, VT_I2, propVal);
}

short CQRmakerPro::GetPDF417XYratio()
{
	short result;
	GetProperty(0x2a, VT_I2, (void*)&result);
	return result;
}

void CQRmakerPro::SetPDF417XYratio(short propVal)
{
	SetProperty(0x2a, VT_I2, propVal);
}

long CQRmakerPro::GetPDF417HWratio()
{
	long result;
	GetProperty(0x2b, VT_I4, (void*)&result);
	return result;
}

void CQRmakerPro::SetPDF417HWratio(long propVal)
{
	SetProperty(0x2b, VT_I4, propVal);
}

short CQRmakerPro::GetNumRow()
{
	short result;
	GetProperty(0x2c, VT_I2, (void*)&result);
	return result;
}

void CQRmakerPro::SetNumRow(short propVal)
{
	SetProperty(0x2c, VT_I2, propVal);
}

short CQRmakerPro::GetBarChrGap()
{
	short result;
	GetProperty(0x2d, VT_I2, (void*)&result);
	return result;
}

void CQRmakerPro::SetBarChrGap(short propVal)
{
	SetProperty(0x2d, VT_I2, propVal);
}

VARIANT CQRmakerPro::GetImageData()
{
	VARIANT result;
	GetProperty(0x2e, VT_VARIANT, (void*)&result);
	return result;
}

void CQRmakerPro::SetImageData(const VARIANT& propVal)
{
	SetProperty(0x2e, VT_VARIANT, &propVal);
}

VARIANT CQRmakerPro::GetInputDataA()
{
	VARIANT result;
	GetProperty(0x2f, VT_VARIANT, (void*)&result);
	return result;
}

void CQRmakerPro::SetInputDataA(const VARIANT& propVal)
{
	SetProperty(0x2f, VT_VARIANT, &propVal);
}

long CQRmakerPro::GetMirror()
{
	long result;
	GetProperty(0x30, VT_I4, (void*)&result);
	return result;
}

void CQRmakerPro::SetMirror(long propVal)
{
	SetProperty(0x30, VT_I4, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CQRmakerPro operations

short CQRmakerPro::CreateQrMetaFile(long hDC, const VARIANT& fileName, short enhancedSw)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_VARIANT VTS_I2;
	InvokeHelper(0x31, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hDC, &fileName, enhancedSw);
	return result;
}

short CQRmakerPro::DrawQrImage(long hDC, long x, long y)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x32, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hDC, x, y);
	return result;
}

void CQRmakerPro::Refresh()
{
	InvokeHelper(DISPID_REFRESH, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

short CQRmakerPro::QrImageCopy(short enhancedSw)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x33, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		enhancedSw);
	return result;
}

void CQRmakerPro::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
